// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
enum Role{
  ASSOCIATE
  MANAGER
  OWNER
}
model User {
  id String @id @default(uuid())
  username String @unique
  name String
  email String @unique
  dateOfBirth DateTime
  role Role @default(ASSOCIATE)

  company Company? @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobRequestsCreated JobRequest[]
  reviewsGiven Review[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsRecieved Conversation[] @relation("MemberTwo")


  @@index([companyId])
}

model Company{
  id String @id @default(uuid())
  employees User[]
  ownerEmail String @unique

  managedJobs JobRequest[] 

}

model JobRequest{
  id String @id @default(uuid())
  title String

  companyManaged Company? @relation(fields:[companyId], references: [id])
  companyId String 
  userManaged User @relation(fields:[userId], references: [id])
  userId String
  

  @@index([userId])
  @@index([companyId])
}

model Review{
  id String @id @default(uuid())

  userManaged User @relation(fields:[userId], references: [id])
  userId String


  @@index([userId])
}

model Inventory{
  id String @id @default(uuid())
}

model Item{
  id String @id @default(uuid())

}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne User @relation("MemberOne", fields:[memberOneId], references:[id], onDelete:Cascade)

  memberTwoId String
  memberTwo User @relation("MemberTwo", fields:[memberTwoId], references:[id], onDelete:Cascade)
  
  directMessages DirectMessage[]
  @@index(memberTwoId)

  // Cannot have two conversations with the same people
  @@unique([memberOneId, memberTwoId])
}

model DirectMessage{
  id String @id @default(uuid())
  content String
  fileUrl String?

  memberId String
  member User @relation(fields:[memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)

  @@index([memberId])
  @@index([conversationId])
}