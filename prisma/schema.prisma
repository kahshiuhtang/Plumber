// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
enum Role{
  ASSOCIATE
  MANAGER
  OWNER
}
model User {
  id String @id @default(uuid())
  username String @unique
  name String
  email String @unique
  dateOfBirth DateTime
  role Role @default(ASSOCIATE)

  company Company? @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobRequestsCreated JobRequest[]
  reviewsGiven Review[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("UserOne")
  conversationsRecieved Conversation[] @relation("UserTwo")

  @@index([companyId])
}

model Company{
  id String @id @default(uuid())
  ownerEmail String
  companyName String

  managedJobs JobRequest[] 
  services Service[]
  inventory Inventory[]
  employees User[]
  reviews Review[]

}

model JobRequest{
  id String @id @default(uuid())
  title String

  companyManaged Company? @relation(fields:[companyId], references: [id])
  companyId String 
  userCreator User @relation(fields:[userId], references: [id])
  userId String
  
  @@index([userId])
  @@index([companyId])
}

model Service{
  id String @id @default(uuid())
  company Company @relation(fields:[companyId], references:[id])
  
  serviceTitle String
  serviceDescription String
  companyId String
  serviceName String[]
  reviews Review[]

  @@index([companyId])
}

model Review{
  id String @id @default(uuid())

  userCreator User @relation(fields:[userId], references: [id])
  userId String

  rating Int
  title String
  description String
  images String[]

  serviceId String 
  service Service? @relation(fields:[serviceId], references:[id])
  companyId String
  company Company? @relation(fields:[companyId], references:[id])

  @@index([userId])
  @@index([companyId])
  @@index([serviceId])
}

model Inventory{
  id String @id @default(uuid())
  items Item[]

  company Company @relation(fields:[companyId], references:[id])
  companyId String[]

  @@index([companyId])
}
model Item{
  id String @id @default(uuid())

  inInventory Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
  transactions ItemTransaction[]

  @@index([inventoryId])
}
model ItemTransaction{
  id String @id @default(uuid())

  itemReference Item @relation(fields:[itemId], references:[id])
  itemId String

  quantity Float
  description String @default("")

  @@index(itemId)
}
model Conversation {
  id String @id @default(uuid())

  userOneId String
  userOne User @relation("UserOne", fields:[userOneId], references:[id], onDelete:Cascade)

  userTwoId String
  userTwo User @relation("UserTwo", fields:[userTwoId], references:[id], onDelete:Cascade)
  
  directMessages DirectMessage[]
  @@index(userTwoId)

  // Cannot have two conversations with the same people
  @@unique([userOneId, userTwoId])
}

model DirectMessage{
  id String @id @default(uuid())
  content String
  fileUrl String?

  userId String
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)

  @@index([userId])
  @@index([conversationId])
}